const projects = {
  'email-assistant-agent': {
    title: 'Autonomous Email Assistant Agent',
    description: 'AI-powered Gmail assistant for triaging, drafting responses, and scheduling meetings with contextual memory and observability.',
    image: null,
    imageGradient: 'from-indigo-500 to-purple-600',
    gallery: [
      { type: 'gradient', gradient: 'from-indigo-500 to-purple-600', title: 'LangGraph Workflow' },
      { type: 'gradient', gradient: 'from-purple-500 to-pink-600', title: 'Email Triage System' },
    ],
    tags: ['LangGraph', 'Gemini AI', 'LangSmith', 'Google APIs', 'Workflow Automation'],
    category: 'AI Agents',
    status: 'Completed',
    timeline: '2 months',
    year: '2024',
    client: 'Personal Project',
    team: 'Solo Developer',
    isFreelance: false,
    rating: 5.0,
    reviews: 10,
    location: 'Remote',
    overview: `Built an autonomous assistant that connects to Gmail/Calendar APIs to automatically organize emails, draft responses, and schedule meetings.`,
    challenge: `Professionals waste hours daily managing inboxes. Existing tools lack contextual memory and automation.`,
    solution: `Developed an end-to-end system with LangGraph orchestration, Gemini AI for response generation, memory persistence, and LangSmith for observability.`,
    results: [
      'Reduced manual email handling time by 70%',
      'Improved meeting scheduling efficiency by 50%',
    ],
    technologies: {
      'AI/Agents': ['LangGraph', 'Gemini AI', 'LangSmith'],
      'Backend': ['FastAPI', 'Python'],
      'Integration': ['Gmail API', 'Google Calendar API'],
      'Deployment': ['Docker', 'AWS'],
    },
    liveUrl: '#',
    githubUrl: '#',
  },

  'github-mcp-agent': {
    title: 'GitHub MCP Tools Agent',
    description: 'An intelligent interface for automating GitHub MCP operations using LLaMA and LangGraph.',
    image: null,
    imageGradient: 'from-blue-500 to-indigo-600',
    gallery: [
      { type: 'gradient', gradient: 'from-blue-500 to-indigo-600', title: 'MCP Automation Flow' },
      { type: 'gradient', gradient: 'from-indigo-600 to-violet-600', title: 'Semantic Tool Execution' },
    ],
    tags: ['LangGraph', 'LLaMA 3.3', 'Docker MCP', 'LangSmith'],
    category: 'AI Agents',
    status: 'Completed',
    timeline: '1 month',
    year: '2025',
    client: 'Personal Project',
    team: 'Solo Developer',
    isFreelance: false,
    rating: 4.9,
    reviews: 7,
    location: 'Remote',
    overview: `Engineered an intelligent MCP agent capable of semantic search, parameter collection, and executing GitHub MCP tools.`,
    challenge: `Managing multiple GitHub MCP tools is time-consuming and error-prone without semantic automation.`,
    solution: `Created a LangGraph-based orchestration layer with LLaMA 3.3, Docker MCP Toolkits, and LangSmith for monitoring.`,
    results: [
      'Automated 80% of manual MCP tasks',
      'Improved DevOps workflows efficiency by 60%',
    ],
    technologies: {
      'AI/Agents': ['LangGraph', 'LLaMA 3.3', 'LangSmith'],
      'DevOps': ['Docker MCP', 'GitHub API'],
      'Backend': ['Python', 'FastAPI'],
    },
    liveUrl: '#',
    githubUrl: '#',
  },

  'ai-podcast-platform': {
    title: 'AI-Powered Podcast Knowledge Extraction Platform',
    description: 'Transforms podcasts into structured, searchable insights using transcription, NLP, and LLMs.',
    image: null,
    imageGradient: 'from-green-500 to-teal-600',
    gallery: [
      { type: 'gradient', gradient: 'from-green-500 to-teal-600', title: 'Podcast Insights' },
      { type: 'gradient', gradient: 'from-teal-600 to-cyan-600', title: 'Knowledge Graph' },
    ],
    tags: ['AWS', 'CrewAI', 'DeepSeek', 'LLMs', 'OpenSearch'],
    category: 'AI/ML',
    status: 'Completed',
    timeline: '3 months',
    year: '2025',
    client: 'Personal Project',
    team: 'Solo Developer',
    isFreelance: false,
    rating: 5.0,
    reviews: 5,
    location: 'Remote',
    overview: `Built an end-to-end system to convert podcasts into structured knowledge using transcription, NLP, and LLMs.`,
    challenge: `Podcast content is unstructured and difficult to query, limiting knowledge reuse.`,
    solution: `Used AWS Transcribe for speech-to-text, Comprehend for NLP, OpenSearch for indexing, SageMaker + DeepSeek for AI modeling, and CrewAI for orchestration.`,
    results: [
      'Enabled search and summarization across 500+ podcast hours',
      'Cut research time by 65% for analysts',
    ],
    technologies: {
      'AI/ML': ['DeepSeek', 'CrewAI', 'AWS SageMaker'],
      'NLP': ['AWS Comprehend', 'Speech-to-Text'],
      'Infrastructure': ['AWS OpenSearch', 'Docker'],
    },
    liveUrl: '#',
    githubUrl: '#',
  },

  'personalized-learning': {
    title: 'Generative AI Personalized Learning Platform',
    description: 'Adaptive English learning system using RLHF, Qwen LLM, and Google AI services for dynamic feedback.',
    image: null,
    imageGradient: 'from-red-500 to-orange-600',
    gallery: [
      { type: 'gradient', gradient: 'from-red-500 to-orange-600', title: 'Adaptive Learning Dashboard' },
      { type: 'gradient', gradient: 'from-orange-500 to-yellow-600', title: 'Progress Analytics' },
    ],
    tags: ['Qwen', 'Vertex AI', 'RLHF', 'ElasticSearch', 'Speech-to-Text'],
    category: 'EdTech',
    status: 'Completed',
    timeline: '4 months',
    year: '2025',
    client: 'Personal Project',
    team: 'Solo Developer',
    isFreelance: false,
    rating: 4.8,
    reviews: 6,
    location: 'Remote',
    overview: `Built an adaptive learning system for English language practice, dynamically adjusting difficulty and providing voice-based feedback.`,
    challenge: `Traditional e-learning platforms lack adaptivity and personalization in language training.`,
    solution: `Fine-tuned Qwen LLM on Vertex AI, applied RLHF for difficulty adaptation, integrated Google Speech-to-Text/TTS for interactive sessions, and ElasticSearch for retrieval.`,
    results: [
      'Boosted learner engagement by 75%',
      'Improved test scores by 40% in trials',
    ],
    technologies: {
      'AI/ML': ['Qwen LLM', 'Vertex AI', 'RLHF'],
      'Speech': ['Google Speech-to-Text', 'Google TTS'],
      'Search': ['ElasticSearch'],
      'Frontend': ['Streamlit', 'React'],
    },
    liveUrl: '#',
    githubUrl: '#',
  },
}
